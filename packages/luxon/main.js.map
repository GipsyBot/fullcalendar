{"version":3,"file":"main.js","sources":["src/main.ts"],"sourcesContent":["import { DateTime as LuxonDateTime, Duration as LuxonDuration } from 'luxon'\nimport { Duration, NamedTimeZoneImpl, VerboseFormattingArg, createPlugin, CalendarApi } from '@fullcalendar/common'\n\nexport function toLuxonDateTime(date: Date, calendar: CalendarApi): LuxonDateTime {\n  if (!(calendar instanceof CalendarApi)) {\n    throw new Error('must supply a CalendarApi instance')\n  }\n\n  let { dateEnv } = calendar.getCurrentData()\n\n  return LuxonDateTime.fromJSDate(date, {\n    zone: dateEnv.timeZone,\n    locale: dateEnv.locale.codes[0],\n  })\n}\n\nexport function toLuxonDuration(duration: Duration, calendar: CalendarApi): LuxonDuration {\n  if (!(calendar instanceof CalendarApi)) {\n    throw new Error('must supply a CalendarApi instance')\n  }\n\n  let { dateEnv } = calendar.getCurrentData()\n\n  return LuxonDuration.fromObject({\n    ...duration,\n    locale: dateEnv.locale.codes[0],\n  })\n}\n\nclass LuxonNamedTimeZone extends NamedTimeZoneImpl {\n  offsetForArray(a: number[]): number {\n    return arrayToLuxon(a, this.timeZoneName).offset\n  }\n\n  timestampToArray(ms: number): number[] {\n    return luxonToArray(\n      LuxonDateTime.fromMillis(ms, {\n        zone: this.timeZoneName,\n      }),\n    )\n  }\n}\n\nfunction formatWithCmdStr(cmdStr: string, arg: VerboseFormattingArg) {\n  let cmd = parseCmdStr(cmdStr)\n\n  if (arg.end) {\n    let start = arrayToLuxon(\n      arg.start.array,\n      arg.timeZone,\n      arg.localeCodes[0],\n    )\n    let end = arrayToLuxon(\n      arg.end.array,\n      arg.timeZone,\n      arg.localeCodes[0],\n    )\n    return formatRange(\n      cmd,\n      start.toFormat.bind(start),\n      end.toFormat.bind(end),\n      arg.defaultSeparator,\n    )\n  }\n\n  return arrayToLuxon(\n    arg.date.array,\n    arg.timeZone,\n    arg.localeCodes[0],\n  ).toFormat(cmd.whole)\n}\n\nexport default createPlugin({\n  cmdFormatter: formatWithCmdStr,\n  namedTimeZonedImpl: LuxonNamedTimeZone,\n})\n\nfunction luxonToArray(datetime: LuxonDateTime): number[] {\n  return [\n    datetime.year,\n    datetime.month - 1, // convert 1-based to 0-based\n    datetime.day,\n    datetime.hour,\n    datetime.minute,\n    datetime.second,\n    datetime.millisecond,\n  ]\n}\n\nfunction arrayToLuxon(arr: number[], timeZone: string, locale?: string): LuxonDateTime {\n  return LuxonDateTime.fromObject({\n    zone: timeZone,\n    locale,\n    year: arr[0],\n    month: arr[1] + 1, // convert 0-based to 1-based\n    day: arr[2],\n    hour: arr[3],\n    minute: arr[4],\n    second: arr[5],\n    millisecond: arr[6],\n  })\n}\n\n/* Range Formatting (duplicate code as other date plugins)\n----------------------------------------------------------------------------------------------------*/\n\ninterface CmdParts {\n  head: string | null\n  middle: CmdParts | null\n  tail: string | null\n  whole: string\n}\n\nfunction parseCmdStr(cmdStr: string): CmdParts {\n  let parts = cmdStr.match(/^(.*?)\\{(.*)\\}(.*)$/) // TODO: lookbehinds for escape characters\n\n  if (parts) {\n    let middle = parseCmdStr(parts[2])\n\n    return {\n      head: parts[1],\n      middle,\n      tail: parts[3],\n      whole: parts[1] + middle.whole + parts[3],\n    }\n  }\n\n  return {\n    head: null,\n    middle: null,\n    tail: null,\n    whole: cmdStr,\n  }\n}\n\nfunction formatRange(\n  cmd: CmdParts,\n  formatStart: (cmdStr: string) => string,\n  formatEnd: (cmdStr: string) => string,\n  separator: string,\n): string {\n  if (cmd.middle) {\n    let startHead = formatStart(cmd.head)\n    let startMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator)\n    let startTail = formatStart(cmd.tail)\n\n    let endHead = formatEnd(cmd.head)\n    let endMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator)\n    let endTail = formatEnd(cmd.tail)\n\n    if (startHead === endHead && startTail === endTail) {\n      return startHead +\n        (startMiddle === endMiddle ? startMiddle : startMiddle + separator + endMiddle) +\n        startTail\n    }\n  }\n\n  let startWhole = formatStart(cmd.whole)\n  let endWhole = formatEnd(cmd.whole)\n\n  if (startWhole === endWhole) {\n    return startWhole\n  }\n\n  return startWhole + separator + endWhole\n}\n"],"names":["LuxonDateTime","LuxonDuration"],"mappings":";;;;;;;;;SAGgB,eAAe,CAAC,IAAU,EAAE,QAAqB;IAC/D,IAAI,EAAE,QAAQ,YAAY,WAAW,CAAC,EAAE;QACtC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAA;KACtD;IAEK,IAAA,OAAO,GAAK,QAAQ,CAAC,cAAc,EAAE,QAA9B,CAA8B;IAE3C,OAAOA,QAAa,CAAC,UAAU,CAAC,IAAI,EAAE;QACpC,IAAI,EAAE,OAAO,CAAC,QAAQ;QACtB,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;KAChC,CAAC,CAAA;AACJ,CAAC;SAEe,eAAe,CAAC,QAAkB,EAAE,QAAqB;IACvE,IAAI,EAAE,QAAQ,YAAY,WAAW,CAAC,EAAE;QACtC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAA;KACtD;IAEK,IAAA,OAAO,GAAK,QAAQ,CAAC,cAAc,EAAE,QAA9B,CAA8B;IAE3C,OAAOC,QAAa,CAAC,UAAU,uBAC1B,QAAQ,KACX,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAC/B,CAAA;AACJ,CAAC;AAED;IAAiC,sCAAiB;IAAlD;;KAYC;IAXC,2CAAc,GAAd,UAAe,CAAW;QACxB,OAAO,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,CAAA;KACjD;IAED,6CAAgB,GAAhB,UAAiB,EAAU;QACzB,OAAO,YAAY,CACjBD,QAAa,CAAC,UAAU,CAAC,EAAE,EAAE;YAC3B,IAAI,EAAE,IAAI,CAAC,YAAY;SACxB,CAAC,CACH,CAAA;KACF;IACH,yBAAC;AAAD,CAZA,CAAiC,iBAAiB,GAYjD;AAED,SAAS,gBAAgB,CAAC,MAAc,EAAE,GAAyB;IACjE,IAAI,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAA;IAE7B,IAAI,GAAG,CAAC,GAAG,EAAE;QACX,IAAI,KAAK,GAAG,YAAY,CACtB,GAAG,CAAC,KAAK,CAAC,KAAK,EACf,GAAG,CAAC,QAAQ,EACZ,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CACnB,CAAA;QACD,IAAI,GAAG,GAAG,YAAY,CACpB,GAAG,CAAC,GAAG,CAAC,KAAK,EACb,GAAG,CAAC,QAAQ,EACZ,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CACnB,CAAA;QACD,OAAO,WAAW,CAChB,GAAG,EACH,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAC1B,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EACtB,GAAG,CAAC,gBAAgB,CACrB,CAAA;KACF;IAED,OAAO,YAAY,CACjB,GAAG,CAAC,IAAI,CAAC,KAAK,EACd,GAAG,CAAC,QAAQ,EACZ,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CACnB,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;AACvB,CAAC;AAED,WAAe,YAAY,CAAC;IAC1B,YAAY,EAAE,gBAAgB;IAC9B,kBAAkB,EAAE,kBAAkB;CACvC,CAAC,CAAA;AAEF,SAAS,YAAY,CAAC,QAAuB;IAC3C,OAAO;QACL,QAAQ,CAAC,IAAI;QACb,QAAQ,CAAC,KAAK,GAAG,CAAC;QAClB,QAAQ,CAAC,GAAG;QACZ,QAAQ,CAAC,IAAI;QACb,QAAQ,CAAC,MAAM;QACf,QAAQ,CAAC,MAAM;QACf,QAAQ,CAAC,WAAW;KACrB,CAAA;AACH,CAAC;AAED,SAAS,YAAY,CAAC,GAAa,EAAE,QAAgB,EAAE,MAAe;IACpE,OAAOA,QAAa,CAAC,UAAU,CAAC;QAC9B,IAAI,EAAE,QAAQ;QACd,MAAM,QAAA;QACN,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QACZ,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QACjB,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACX,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QACZ,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QACd,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QACd,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;KACpB,CAAC,CAAA;AACJ,CAAC;AAYD,SAAS,WAAW,CAAC,MAAc;IACjC,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAA;IAE/C,IAAI,KAAK,EAAE;QACT,IAAI,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;QAElC,OAAO;YACL,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;YACd,MAAM,QAAA;YACN,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;YACd,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;SAC1C,CAAA;KACF;IAED,OAAO;QACL,IAAI,EAAE,IAAI;QACV,MAAM,EAAE,IAAI;QACZ,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,MAAM;KACd,CAAA;AACH,CAAC;AAED,SAAS,WAAW,CAClB,GAAa,EACb,WAAuC,EACvC,SAAqC,EACrC,SAAiB;IAEjB,IAAI,GAAG,CAAC,MAAM,EAAE;QACd,IAAI,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACrC,IAAI,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;QAC5E,IAAI,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAErC,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACjC,IAAI,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;QAC1E,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAEjC,IAAI,SAAS,KAAK,OAAO,IAAI,SAAS,KAAK,OAAO,EAAE;YAClD,OAAO,SAAS;iBACb,WAAW,KAAK,SAAS,GAAG,WAAW,GAAG,WAAW,GAAG,SAAS,GAAG,SAAS,CAAC;gBAC/E,SAAS,CAAA;SACZ;KACF;IAED,IAAI,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IACvC,IAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IAEnC,IAAI,UAAU,KAAK,QAAQ,EAAE;QAC3B,OAAO,UAAU,CAAA;KAClB;IAED,OAAO,UAAU,GAAG,SAAS,GAAG,QAAQ,CAAA;AAC1C;;;;;"}